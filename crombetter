#!/bin/bash
set -euo pipefail

### USAGE ###
#
# Get status of workflows:
#   crombetter status [n]
#
# Get failed workflows with the error:
#   crombetter failed [n]
#
# Get more details for last (or specified) job:
#   crombetter details [id]
#
# Get all info on last (or specified) jobs:
#   crombetter meta [id]

### Requirements ###
# - bash
# - curl
# - jq

API_URL=http://localhost:8000/api

function log ()
{
	# Send log to stderr to have only clean parsable JSON on stdout
	>&2 echo $@
}

function api_call ()
{
	curl -sS "${API_URL}/workflows/v1${1}" -H "accept: application/json"
}

function get_newest ()
{
	get_status_all 1 | jq -r ".id"
}

function get_status_all ()
{
	n=${1:-10}
	log "=== SHOWING LAST $n WORKFLOWS ==="
	api_call "/query" \
	| jq ".results[:$n][] | {id, status, submission}"
}

function get_failed ()
{
	n=${1:-3}
	log "=== SHOWING LAST $n FAILED WORKFLOWS ==="
	failed=$(api_call "/query?status=Failed" \
		 | jq -r ".results[:$n][].id" )
	for id in $failed
	do
		log "=== ${id}"
		api_call "/${id}/metadata" \
		| jq '{id, "message": .failures[].causedBy[].message, submission}'
	done
}


function get_details ()
{
	id=${1:-$(get_newest)}
	log "=== SHOWING DETAILS FOR WORKFLOW: $id ==="
	api_call "/${id}/metadata" \
	| jq '{id, workflowName, status, submission, workflowProcessingEvents, calls: (.calls | map_values(.[-1].executionStatus))}'
}


function get_metadata ()
{
	id=${1:-$(get_newest)}
	log "=== SHOWING ALL METADATA FOR WORKFLOW: $id ==="
	api_call "/${id}/metadata" \
	| jq
}

### ARGUMENT PARSING ###

# Debug mode
if [ $1 = "--debug" ]
then
	set -x
	shift
fi

# Command and options
case "$1" in
	status) shift
		get_status_all $@;;
	failed) shift
		get_failed $@;;
	details) shift
		get_details $@;;
	meta) shift
		get_metadata $@;;
esac

exit 0
